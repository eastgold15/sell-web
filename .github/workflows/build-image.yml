name: "构建Docker镜像并推送到阿里云ACR"

on:
  workflow_dispatch:
  workflow_call:
  # release:
  #   types: [published]

env:
  REGISTRY: registry.cn-chengdu.aliyuncs.com # 阿里云容器镜像服务
  IMAGE_NAME: elysia-start # 镜像名称使用实际仓库名

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version-tag: ${{ steps.extract-tag.outputs.version }}

    steps:
      # Step 1: 拉取仓库代码到 Runner
      - name: 📦 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # Step 2: 登录到阿里云仓库
      - name: 🔐 登录到阿里云仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      # Step 3: 生成docker 标签
      - name: 📌 生成docker 标签
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Git tag 自动版本 (仅在 release 时)
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }} # 如 tag v1.0.0 → name/app:1.0.0
            type=ref,event=branch     # 如 main → name/app:main
            type=ref,event=pr         # 如 pr/2/merge → name/app:pr-2
            # 总是生成 latest 标签
            type=raw,value=latest
        env:
          DOCKER_METADATA_SHORT_SHA_LENGTH: 7

      # Step 4: 显示构建信息
      - name: 📋 显示构建信息
        run: |
          echo "🚀 开始构建 Docker 镜像"
          echo "📂 构建上下文: ."
          echo "🐳 Dockerfile: .container/prod/Dockerfile"
          echo "📦 将生成的标签: ${{ steps.meta.outputs.tags }}"
          echo "---"

      - name: 🐳构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .container/prod/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Step 5: 提取版本标签
      - name: 🏷️ 提取版本标签
        id: extract-tag
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "所有标签: $TAGS"
          
          # 提取版本标签（优先使用semver标签，否则使用latest）
          if echo "$TAGS" | grep -q ":v\?[0-9]\+\.[0-9]\+\.[0-9]\+"; then
            VERSION_TAG=$(echo "$TAGS" | grep -o ":v\?[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1 | sed 's/^://')
          else
            VERSION_TAG="latest"
          fi
          
          echo "提取的版本标签: $VERSION_TAG"
          echo "version=$VERSION_TAG" >> $GITHUB_OUTPUT

      # Step 6: 输出镜像信息
      - name: 📋 输出镜像信息
        run: |
          echo "🎉 镜像构建完成！"
          echo "📦 镜像标签: ${{ steps.meta.outputs.tags }}"
          echo "🏷️ 版本标签: ${{ steps.extract-tag.outputs.version }}"
          echo "🏷️ 镜像标签列表:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'
          echo "📍 镜像仓库: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🔗 拉取命令示例:"
          echo "  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-tag.outputs.version }}"
