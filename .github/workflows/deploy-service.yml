name: "部署和启动服务"

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: '🏷️ 指定镜像标签 (默认使用latest)'
        required: false
        default: 'latest'
        type: string
      force_recreate:
        description: '🔄 强制重新创建容器'
        required: false
        default: 'false'
        type: boolean
      service_action:
        description: '🎯 服务操作'
        required: false
        default: 'deploy'
        type: choice
        options:
          - deploy
          - restart
          - stop
          - status
  workflow_call:
    inputs:
      image_tag:
        description: '指定镜像标签 (默认使用latest)'
        required: false
        default: 'latest'
        type: string
      force_recreate:
        description: '强制重新创建容器'
        required: false
        default: false
        type: boolean
      service_action:
        description: '服务操作'
        required: false
        default: 'deploy'
        type: string

env:
  PROJECT_NAME: elysia-start # 项目名称
  PROJECT_DIR: /1/elysia-start  #服务器项目目录
  SERVER_PORT: 22
  REGISTRY: registry.cn-chengdu.aliyuncs.com
  IMAGE_NAME: elysia-start

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 部署到服务器
      - name: 🚀 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            set -euo pipefail
            cd ${{ env.PROJECT_DIR }} || { echo "❌ 目录不存在"; exit 1; }
            
            echo "📁 检查文件结构..."
            ls -la .container/prod/
            ls -la .env
            
            echo "🛑 停止并清理旧服务..."
            cd .container/prod
            
            # 停止现有服务
            if docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production ps -q | grep -q .; then
              echo "停止现有服务..."
              docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production down --remove-orphans
            else
              echo "没有运行中的服务"
            fi
            
            # 清理悬空镜像和容器
            echo "🧹 清理悬空资源..."
            docker system prune -f || true
            
            # 设置镜像标签
            IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
            SERVICE_ACTION="${{ github.event.inputs.service_action || 'deploy' }}"
            echo "📦 使用镜像标签: $IMAGE_TAG"
            echo "🎯 服务操作: $SERVICE_ACTION"
            
            # 设置环境变量
            export IMAGE_TAG=$IMAGE_TAG
            
            # 根据操作类型执行不同的命令
            case $SERVICE_ACTION in
              "deploy")
                echo "📥 拉取最新镜像..."
                docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
                
                echo "🚀 启动服务..."
                if [ "${{ github.event.inputs.force_recreate }}" = "true" ]; then
                  docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production up -d --force-recreate
                else
                  docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production up -d
                fi
                ;;
              "restart")
                echo "🔄 重启服务..."
                docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production restart
                ;;
              "stop")
                echo "🛑 停止服务..."
                docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production down
                exit 0
                ;;
              "status")
                echo "📊 查看服务状态..."
                docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production ps
                docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production logs --tail 20
                exit 0
                ;;
              *)
                echo "❌ 未知的服务操作: $SERVICE_ACTION"
                exit 1
                ;;
            esac
            
            # 等待服务启动
            echo "⏳ 等待服务启动..."
            sleep 10
            
            # 验证服务状态
            echo "🔍 验证服务状态..."
            docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production ps
            
            # 检查容器健康状态
            echo "🏥 检查容器健康状态..."
            for container in $(docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production ps -q); do
              container_name=$(docker inspect --format='{{.Name}}' $container | sed 's/^\///')
              status=$(docker inspect --format='{{.State.Status}}' $container)
              echo "容器 $container_name: $status"
              
              if [ "$status" != "running" ]; then
                echo "❌ 容器 $container_name 未正常运行"
                echo "📋 容器日志:"
                docker logs $container --tail 50
                exit 1
              fi
            done
            
            # 显示服务日志
            echo "📋 服务启动日志:"
            docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production logs --tail 20
            
            # 清理旧镜像
            echo "🧹 清理旧镜像..."
            docker image prune -f || true
            
            echo "🎉 部署完成！服务已成功启动"
            
            # 显示最终状态
            echo "📊 最终服务状态:"
            docker-compose -f docker-compose.prod.yml --env-file ../../.env --env-file .env.production ps
